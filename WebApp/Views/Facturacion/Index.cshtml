@using System.Text.Json;
@using WebApp.Services;
@{
    ViewData["Title"] = "Facturación";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var logged = Context.Session.GetString("usuario");
    UserResponse? usuario = null;
    if (logged != null)
    { // Is logged
        usuario = JsonSerializer.Deserialize<UserResponse>(logged);
    }
}

<head>
    <link rel="stylesheet" href="~/WebApp.styles.css" asp-append-version="true" />
    <meta charset="UTF-8">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.css">
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.js"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <style>
        body {
            background-image: url('images/background.jpg');
            background-size: cover; /* o 'contain' para ajustar a la pantalla de manera diferente */
            background-repeat: no-repeat;
            background-attachment: fixed; /* Para que la imagen de fondo no se desplace con el contenido */
        }

        .form-group {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            margin-bottom: 10px;
        }

            .form-group input,
            .form-group label {
                width: 100%;
            }

            .form-group + .form-group {
                margin-top: 10px;
            }

        .cuadro-blanco {
            height: 1px;
            background-color: #ddd;
            margin-top: 5px;
        }

    </style>
</head>
<body>
    <br />
    <br />
    <br />
    <h2 class="mb-4 text-center" style="color:white">Agregar Artículo</h2>

    <form id="agregarForm" class="row g-3">
        <div class="col-md-3">
            <label for="codigo" class="form-label">Código:</label>
            <div class="input-group">
                <input type="text" id="codigo" name="codigo" class="form-control" required>
                <button type="button" class="btn btn-primary" onclick="buscarCodigo()">Buscar</button>
                <div class="valid-feedback">
                </div>
                <div class="invalid-feedback">
                    El código no puede estar vacío.
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <label for="nombre" class="form-label">Nombre:</label>
            <input type="text" id="nombre" name="nombre" class="form-control" readonly required>
            <div class="valid-feedback">
            </div>
            <div class="invalid-feedback">
                El nombre no puede estar vacío.
            </div>
        </div>
        <div class="col-md-3">
            <label for="cantidad" class="form-label">Cantidad:</label>
            <input type="number" id="cantidad" name="cantidad" class="form-control" required>
            <div class="valid-feedback">
            </div>
            <div class="invalid-feedback">
                La cantidad no puede estar vacío.
            </div>
        </div>
        <div class="col-md-3">
            <button type="button" class="btn btn-success form-control" onclick="agregarArticulo()" style="margin-top: 30px;width:100px">Agregar</button>
        </div>
    </form>
    <br />
    <table id="tablaArticulos" class="table table-striped">
        <thead style="color:#00539B!important">
            <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Precio</th>
                <th>IVA</th>
                <th>Cantidad</th>
                <th>Total</th>
                <th>Acción</th>
                <th hidden>Id</th>
            </tr>
        </thead>
        <tbody>
            <!-- Aquí se mostrarán los artículos agregados -->
        </tbody>
        <tfoot>
            <tr>
                <td colspan="5" class="text-end">Total: ₡</td>
                <td id="sumaTotal">0.00</td>
            </tr>
        </tfoot>
    </table>

    <button type="button" class="btn btn-primary" onclick="enviarFactura()">Imprimir</button>
    <a type="button" class="btn btn-primary" id="GenPdf" asp-controller="Facturacion" asp-action="GenerarPdf" hidden>generar</a>
    <br />
    <br />

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

</body>
<script>
    let data1 = {};
    async function buscarCodigo() {
        const codigoInput = document.getElementById("codigo");
        const nombreInput = document.getElementById("nombre");
        if (codigoInput.value.trim() === "") {
            // Agrega la clase de invalidación
            codigoInput.classList.add("is-invalid");
            return;
        } else {
            // Remueve la clase de invalidación si existe
            codigoInput.classList.remove("is-invalid");
            // Realizar una solicitud al servidor para verificar la existencia del código
            const response = await fetch(`https://localhost:7228/api/Facturacion/${codigoInput.value}`);


            try {
                // Verificar si la respuesta está vacía o no es JSON válido
                if (!response.ok) {
                    // Manejar el caso de error
                    if (response.status === 404) {
                        // El código no existe
                        nombreInput.value = "";
                        Swal.fire({
                            icon: 'info',
                            title: 'El código no existe dentro del sistema.',
                            text: 'Por favor, inténtelo nuevamente.',
                        })
                    } else {
                        // Otro error, mostrar mensaje de error genérico
                        Swal.fire({
                            icon: 'info',
                            title: 'Hubo un error al procesar la solicitud.',
                            text: 'Por favor, inténtelo nuevamente.',
                        })
                    }
                    return;
                }

                // Analizar la respuesta JSON
                data1 = await response.json();

                // Si el código existe, llenar el campo de nombre
                nombreInput.value = data1.art.nombre;
            } catch (error) {
                console.error("Error al analizar la respuesta JSON:", error);
            }
        }
    }

    let sumaTotal = 0.00;

    function agregarArticulo() {
        const codigoInput = document.getElementById("codigo");
        const nombreInput = document.getElementById("nombre");
        const cantidadInput = document.getElementById("cantidad");

        const tabla = document.getElementById("tablaArticulos");
        const filas = tabla.getElementsByTagName('tbody')[0].getElementsByTagName('tr');


        for (let i = 0; i < filas.length; i++) {
            const codigoExistente = filas[i].getElementsByTagName('td')[0].textContent;

            // Si el código ya existe en la tabla
            if (codigoExistente === codigoInput.value.toUpperCase()) {
                Swal.fire({
                    title: 'Artículo Existente',
                    text: 'Este artículo ya ha sido agregado. ¿Desea agregar más cantidad?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Sí',
                    cancelButtonText: 'No',
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Si el usuario elige agregar más cantidad, actualizar la fila existente
                        const cantidadExistente = parseInt(filas[i].getElementsByTagName('td')[4].textContent);
                        const nuevaCantidad = parseInt(cantidadInput.value);
                        const nuevaTotal = parseFloat(data1.art.precio * nuevaCantidad);

                        // Actualizar cantidad y total en la fila existente
                        filas[i].getElementsByTagName('td')[4].textContent = cantidadExistente + nuevaCantidad;
                        filas[i].getElementsByTagName('td')[5].textContent = parseFloat(filas[i].getElementsByTagName('td')[5].textContent) + nuevaTotal;

                        // Actualizar la suma total
                        sumaTotal += nuevaTotal;
                        document.getElementById("sumaTotal").textContent = sumaTotal.toFixed(2);

                        // Limpiar los campos de entrada
                        codigoInput.value = "";
                        nombreInput.value = "";
                        cantidadInput.value = "";
                    } else {
                        // Si el usuario elige no agregar más cantidad, no hacer nada
                    }
                });

                return;
            }
        }

        if (codigoInput.value.trim() === "" || nombreInput.value.trim() === "" || cantidadInput.value.trim() === "") {
            // Agrega la clase de invalidación
            codigoInput.classList.add("is-invalid");
            nombreInput.classList.add("is-invalid");
            cantidadInput.classList.add("is-invalid");
            return;
        } else {
            codigoInput.classList.remove("is-invalid");
            nombreInput.classList.remove("is-invalid");
            cantidadInput.classList.remove("is-invalid");
            // Validar que el código exista y que la cantidad esté llena
            const nuevoCodigo = data1.art.codigo;
            if (codigoInput.value && nombreInput.value && cantidadInput.value && data1) {
                // Crear una fila para la tabla
                if (data1.art.iva === true) {
                    data1.art.iva = data1.art.precio * 0.13
                    data1.art.total = (data1.art.precio + data1.art.iva) * cantidadInput.value
                } else {
                    data1.art.iva = 0.00
                    data1.art.total = data1.art.precio * cantidadInput.value
                }
                // Obtener la tabla
                const tabla = document.getElementById("tablaArticulos").getElementsByTagName('tbody')[0];

                // Crear una fila para la tabla
                const fila = tabla.insertRow(tabla.rows.length);
                const eliminarBtn = document.createElement('button');
                eliminarBtn.className = 'btn btn-danger';

                const iconoBasura = document.createElement('i');
                iconoBasura.className = 'fas fa-trash-alt'; // Ajusta la clase según el ícono que prefieras

                eliminarBtn.appendChild(iconoBasura);
                eliminarBtn.onclick = function () {
                    eliminarFila(this);
                };

                // Agregar celdas y asignar valores directamente a la fila
                fila.insertCell().textContent = data1.art.codigo;
                fila.insertCell().textContent = nombreInput.value;
                fila.insertCell().textContent = data1.art.precio;
                fila.insertCell().textContent = data1.art.iva;
                fila.insertCell().textContent = cantidadInput.value;
                fila.insertCell().textContent = data1.art.total;
                fila.insertCell().appendChild(eliminarBtn);
                fila.insertCell().textContent = data1.art.id;
                fila.cells[fila.cells.length - 1].style.display = "none";

                // Actualizar la suma total recorriendo todas las filas
                sumaTotal += parseFloat(data1.art.total);

                // Mostrar la suma total
                document.getElementById("sumaTotal").textContent = sumaTotal.toFixed(2);



                // Limpiar los campos del formulario
                codigoInput.value = "";
                nombreInput.value = "";
                cantidadInput.value = "";
            } else {
                alert("Por favor, complete todos los campos antes de agregar.");
            }
        }
    }

    function eliminarFila(btn) {
        const fila = btn.parentNode.parentNode;
        const tabla = document.getElementById("tablaArticulos").getElementsByTagName('tbody')[0];

        // Restar la cantidad del total
        sumaTotal -= parseFloat(fila.cells[5].textContent);
        document.getElementById("sumaTotal").textContent = sumaTotal.toFixed(2);

        // Eliminar la fila
        tabla.removeChild(fila);
    }



    function enviarFactura() {
        const tabla = document.getElementById("tablaArticulos");
        const filas = tabla.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
        if (filas.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'No hay elementos en la factura.',
                text: 'Por favor, agregue al menos un elemento antes de imprimir.',
            });
            return;
        } else {
            // Crear objetos para el encabezado y los detalles
            const encabezado = {
                Cliente: 1,
                Fecha: new Date(),

            };

            const detalles = [];

            // Recorrer filas de la tabla
            for (let i = 0; i < filas.length; i++) {
                const celdas = filas[i].getElementsByTagName('td');

                // Crear objeto para cada detalle
                const detalle = {

                    CodArticulo: celdas[7].textContent,
                    Cantidad: celdas[4].textContent,
                    Total: celdas[5].textContent,
                };

                detalles.push(detalle);
            }

            // Crear objeto para la factura completa
            const factura = {
                Cliente: 1,
                Fecha: new Date(),
                Detalles: detalles,
            };
            console.log('Objeto factura:', factura);
            // Realizar la solicitud al controlador
            fetch('/Facturacion/GuardarFactura', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(factura),
            }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Factura guardada con éxito, redirigir

                        var generarPdfButton = document.getElementById('GenPdf');
                        generarPdfButton.click();
                        setTimeout(function () {
                            // Recargar la página después de esperar 10 segundos
                            location.reload();
                        }, 10000); // 10000 milisegundos = 10 segundos
                    } else {
                        var dmes = data.message
                        Swal.fire({
                            icon: 'Error',
                            title: dmes,
                            text: 'Por favor, inténtelo nuevamente.',
                        })
                    }
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'Error',
                        title: 'Error en la solicitud',
                        text: 'Por favor, inténtelo nuevamente.',
                    })
                });
        }
    }

</script>

